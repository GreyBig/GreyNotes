面向对象基本原则： 
对内是高内聚：对象只负责意向特定的职能，所有对象相关的内容都封装到对象内部
对外是低耦合：外部世界可以看到一部分对象的属性和做某些事情（并非全部）

特征就是属性，行为就是方法。

类的定义里面属性值都是空的，而对象的属性都有具体的值

类的对象称为类的一个实例(Instance) 
类的属性和方法统称为类成员

类的实例化（instantiate）

实例化：从一个类创造出一个对象，我们称之为实例化
$jordan= new User;
echo $jordan->name."\n";   //n是换行
$jordan->dribble();
$jordan->pass();
对象中的成员属性和方法可以通过->符号来访问

const用于类成员常量的定义，一经定义，不可修改
Const可在类中使用，define不能
Const不能再条件语句中定义常量
区分大小写

构造函数一般是在属性后定义。默认构造函数在对象被实例化的时候自动调用

初始化方法： 1、构造函数 2、函数名和类名相同
function __construct(){}构造函数
function __destruct(){} 析构函数

构造函数，在对象被实例化的时候自动调用
析构函数，在程序执行结束的时候会自动调用

析构函数的意义：
析构函数通常被用于清理程序使用的资源。比如程序使用了打印机，那么可以在析构函数里面释放打印机资源。

$this关键字
$this是php里面的伪变量，表示对象自身。可以通过$this的方式访问对象的属性和方法
作用：用来访问当前对象中的对象属性和对象方法的系统变量

访问控制符：
	就是把一些相关的属性和行为隐藏起来，从而得到保护和安全
	public 表示全局，类内部外部子类都可以访问;也是默认的
	protected 表示受保护的，只有本类或子类或父类中可以访问
	private 表示私有的，只有本类内部可以使用
	
类的自动加载
	__autoload() 快速取得对象名称并自动载入到当前页面；自动加载函数可以放到类的外面，执行该文件的时候会自动执行
	
extends 
	PHP类的继承，我们可以理解成共享被继承类的内容。PHP中使用extends单一继承的方法，请切忌!(非C++多继承)被继承的类我们叫做父类(基类)继承者称为子类(派生类)
	
parent 
	子类(派生类)继承父类(基类)。子类想访问跟子类方法同名的父类的时候，并且子类的方法也不想被方法重载的时候。就是用parent
	语法   parent::    只能在子类中使用、
	
基类方法重载
	因为属于向下继承的原理，基类不能使用派生类离的内容，这时基类的一些方法不能完成我们的一些派生类的功能。
	方法重载也可以理解为方法覆盖。
	方法重载指的就是子类的方法名和父类的方法名一致的时候，子类的方法会把父类的方法给覆盖。可以用parent访问父类方法
	
范围操作符
	它是范围解析操作符 ::  
	这个符号用于在类中(而不是对象中)访问成员； 对象中是使用->来调用成员
	作用： 1、调取类常量
		   2、加::来调用一些静态的属性和方法；
	不允许直接调用普通方法

静态成员
	只要在成员前加上关键字static，该变量就称为静态成员。
	静态变量和方法必须通过类名进行引用而不能通过实例对象引用
	有一个A类，有test()方法， 如何调用？  A::test();
	
匿名类 （了解理解就行）
	PHP7支持通过new class来实例化一个匿名类，这可以用来代替一些“用后即焚"的完整类定义
	
trait技术（复制粘贴的作用）
	Tratis是一种为类似PHP的单继承语言而准备的代码复用机制。Trait为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集
	如trait Log(....} 这个类中有几个方法，另一个类可以直接使用class Answer{ use Log; }  
	就好像把trait Log{}这个类中的方法复制粘贴到Answer这个类中
	作用：在没有增加代码的情况下，实现了代码的复用
	比继承extends更简单的一种实现
	
抽象类 abstract
	抽象就是无法确切的说明，但又一定的概念或名称，在PHP中声明一个抽象类或方法我们需要使用abstract
	定义：一个类中至少有一个方法是抽象的，我们称之为抽象类。所以如果定义抽象类
	总结：1、类中至少有一个抽象方法 2、抽象方法不允许有{} 3、抽象方法前面必须要加abstract
	特点：1、不能被实例化，只能被继承 2、派生类里面必须实现抽象类里面所有的抽象方法，少一个都不行。
	
接口 interface
	一种成员属性全部为抽象的特殊抽象类，在程序中同为规范的作用
	类中全部为抽象方法，方法前不用加interface接口抽象方法属性为public 成员属性必须为常量
	接口只允许被实现和引用(所谓的实现就是重载)
	接口引用：implements, extends继承只能单一性，而implements多引用，用逗号分开。
	
self 
	用来访问当前类中的内容的关键字，类似$this关键字，但$this是需要类实例化后才可以使用，self可以直接访问当前类中的内部成员
	因为没有实例化类访问内部属性或方法是没有意义的。所以self一般用来访问类中的：静态成员，常量，或者其他定义内容
	
final 
	用来定义类和方法的一个重要关键字，当定义类的时候该类将不能被继承，当用来定义方法的时候该方法将不能被重载
	
clone 克隆
	$克隆对象名称=clone $原对象名称;
	$a=new My() $b=$a;内存中只有一个对象;  $a=new My()  $b= clone $a;内存中有两个对象
	
	__clone()  魔术方法
	如果想在克隆后改变原对象的内容，需要在类中添加一个特殊的__clone()方法来冲重写原本的属性和方法。__clone()方法只会在对象被克隆的时候自动调用

__get(string $name)
	在读取不可访问的属性的值时该函数会被调用。$name是属性名
	一般用于安全机制，过滤。
__set(string $name,mixed $val)
	设置不可访问的值时会调用该方法
	一般用于安全机制，过滤。
__toString
	尝试直接访问一个实例化出来的对象时会调用该方法，必须有返回值return
__sleep 
	serivalize()函数会检查类中是否存在魔术方法__sleep(),如果存在该方法会先被调用，然后才执行序列化操作
	作用：可以用于清理对象，并返回一个包含对象中所有应该被序列化的变量名称的数组
__wakeup 
	unserivalize()反序列化会检查是否存在一个__wakeup()方法，如存在则先调用该方法，预先准备对象
